name: CI/CD – Build, Push & Rollout (Docker Hub + SSH)

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  # Use o namespace do seu Docker Hub. Ex.: pedrobrantis
  DOCKERHUB_NAMESPACE: ${{ secrets.REGISTRY_USERNAME }}
  IMAGE_NAME: ${{ secrets.REGISTRY_USERNAME }}/${{ github.event.repository.name }}   # docker.io/<namespace>/<repo>
  NAMESPACE: app-demo
  DEPLOYMENT: backend
  CONTAINER: app

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Compute tags
        id: meta
        run: |
          # Docker Hub é case-sensitive no path: garanta lowercase no repositório
          REPO_LC="$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')"
          echo "image=${{ env.REGISTRY }}/${{ env.DOCKERHUB_NAMESPACE }}/${REPO_LC}:${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          echo "image_latest=${{ env.REGISTRY }}/${{ env.DOCKERHUB_NAMESPACE }}/${REPO_LC}:latest" >> $GITHUB_OUTPUT

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ steps.meta.outputs.image }}
            ${{ steps.meta.outputs.image_latest }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

    outputs:
      image_sha: ${{ steps.meta.outputs.image }}
      image_latest: ${{ steps.meta.outputs.image_latest }}

  deploy:
    name: Rollout via SSH on EC2
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Add EC2 host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Rollout with SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}       # IP/DNS da EC2
          username: ${{ secrets.EC2_USER }}   # ex.: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}     # conteúdo da .pem
          port: 22
          script_stop: true
          script: |
            set -euo pipefail

            # k3s kubeconfig (geralmente requer sudo)
            export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
            alias kubectl='sudo KUBECONFIG=/etc/rancher/k3s/k3s.yaml kubectl'

            IMAGE="${{ needs.build-and-push.outputs.image_sha }}"
            echo "Aplicando ${IMAGE} em ${DEPLOYMENT}/${CONTAINER} (ns ${NAMESPACE})"

            kubectl -n ${NAMESPACE} set image deployment/${DEPLOYMENT} ${CONTAINER}=${IMAGE}
            kubectl -n ${NAMESPACE} rollout status deployment/${DEPLOYMENT} --timeout=300s
